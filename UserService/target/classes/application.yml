server:
  port: 8081

# H2 Database
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:dcbapp
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/microservice_user
    username: root
    password: Root@123

#config configuration
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect # The SQL dialect makes Hibernate generate better SQL for the chosen database
    show-sql: true
  application:
    name: USER-SERVICE
  config:
    import: optional:configserver:http://localhost:8085    
#  profiles:
#    active: prod
    
#spring.profiles.active: prod or dev if we gives the all dev or prod properties will appear
#spring.config.import= optional:configserver:http://localhost:8085 #in appplication.properties file

#oauth client configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri:  https://dev-81401245.okta.com/oauth2/default
      client:
        registration:
          my-internal-client:
            provider: okta
            authorization-grant-type: client_credentials
            scope: internal
            client-id: 0oa984cfiakBU9XMS5d7
            client-secret: VWKvwCRl1wB0-a1mqT2LDpzuSWoUVr8Q86vr6JaJ

        provider:
          okta:
            issuer-uri:  https://dev-81401245.okta.com/oauth2/default
            
#override congiguration
  main:
    allow-bean-definition-overriding: true
    

#We are using config server as git hub so now below properties are not needed

#eureka:
#  client:
#    register-with-eureka: true
#    fetch-registry: true
#    service-url:
#      defaultZone: http://localhost:8761/eureka
#  instance:
#    prefer-ip-address: true
#    hostname: localhost

#CircuitBreaker Configuration
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED

#Retry Configuration
  retry:
    instances:
      ratingHotelService:
        max-attempts: 3
        wait-duration: 2s
        
#RateLimiter Configuration
  ratelimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s
        limit-for-period: 2  #it allows to at 4s we call 2 times
        timeout-duration: 2s
        
#okta configuration
okta:
  oauth2:
    issuer: https://dev-81401245.okta.com/oauth2/default
    audience: api://default
    

          
          
   
    

